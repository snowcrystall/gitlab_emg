= form_for @application_setting, url: reporting_admin_application_settings_path(anchor: 'js-spam-settings'), html: { class: 'fieldset-form' } do |f|
  = form_errors(@application_setting)

  %fieldset
    .form-group
      .form-check
        = f.check_box :recaptcha_enabled, class: 'form-check-input'
        = f.label :recaptcha_enabled, class: 'form-check-label' do
          = _("Enable reCAPTCHA")
        %span.form-text.text-muted#recaptcha_help_block
          = _('Helps prevent bots from creating accounts.')
    .form-group
      .form-check
        = f.check_box :login_recaptcha_protection_enabled, class: 'form-check-input'
        = f.label :login_recaptcha_protection_enabled, class: 'form-check-label' do
          = _("Enable reCAPTCHA for login")
        %span.form-text.text-muted#recaptcha_help_block
          = _('Helps prevent bots from brute-force attacks.')
    .form-group
      = f.label :recaptcha_site_key, _('reCAPTCHA Site Key'), class: 'label-bold'
      = f.text_field :recaptcha_site_key, class: 'form-control gl-form-input'
      .form-text.text-muted
        = _("Generate site and private keys at")
        %a{ href: 'http://www.google.com/recaptcha', target: 'blank' } http://www.google.com/recaptcha

    .form-group
      = f.label :recaptcha_private_key, _('reCAPTCHA Private Key'), class: 'label-bold'
    .form-group
      = f.text_field :recaptcha_private_key, class: 'form-control gl-form-input'

    .form-group
      .form-check
        = f.check_box :invisible_captcha_enabled, class: 'form-check-input'
        = f.label :invisible_captcha_enabled, class: 'form-check-label' do
          = _('Enable Invisible Captcha during sign up')
        %span.form-text.text-muted
          = _('Helps prevent bots from creating accounts.')

    .form-group
      .form-check
        = f.check_box :akismet_enabled, class: 'form-check-input'
        = f.label :akismet_enabled, class: 'form-check-label' do
          Enable Akismet
        %span.form-text.text-muted#akismet_help_block= _("Helps prevent bots from creating issues")

    .form-group
      = f.label :akismet_api_key, _('Akismet API Key'), class: 'label-bold'
      = f.text_field :akismet_api_key, class: 'form-control gl-form-input'
      .form-text.text-muted
        Generate API key at
        %a{ href: 'http://www.akismet.com', target: 'blank' } http://www.akismet.com

    .form-group
      .form-check
        = f.check_box :unique_ips_limit_enabled, class: 'form-check-input'
        = f.label :unique_ips_limit_enabled, class: 'form-check-label' do
          = _("Limit sign in from multiple ips")
        %span.form-text.text-muted#unique_ip_help_block
          = _("Helps prevent malicious users hide their activity")

    .form-group
      = f.label :unique_ips_limit_per_user, _('IPs per user'), class: 'label-bold'
      = f.number_field :unique_ips_limit_per_user, class: 'form-control gl-form-input'
      .form-text.text-muted
        = _("Maximum number of unique IPs per user")

    .form-group
      = f.label :unique_ips_limit_time_window, _('IP expiration time'), class: 'label-bold'
      = f.number_field :unique_ips_limit_time_window, class: 'form-control gl-form-input'
      .form-text.text-muted
        = _("How many seconds an IP will be counted towards the limit")

    .form-group
      .form-check
        = f.check_box :spam_check_endpoint_enabled, class: 'form-check-input'
        = f.label :spam_check_endpoint_enabled, _('Enable Spam Check via external API endpoint'), class: 'form-check-label'
        .form-text.text-muted= _('Define custom rules for what constitutes spam, independent of Akismet')
    .form-group
      = f.label :spam_check_endpoint_url, _('URL of the external Spam Check endpoint'), class: 'label-bold'
      = f.text_field :spam_check_endpoint_url, class: 'form-control gl-form-input'
    .form-group
      = f.label :spam_check_api_key, _('Spam Check API Key'), class: 'gl-font-weight-bold'
      = f.text_field :spam_check_api_key, class: 'form-control gl-form-input'
      .form-text.text-muted= _('The API key used by GitLab for accessing the Spam Check service endpoint')

  = f.submit _('Save changes'), class: "gl-button btn btn-confirm"
